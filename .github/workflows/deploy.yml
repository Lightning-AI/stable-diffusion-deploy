name: Trigger Deployment

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on: workflow_dispatch

jobs:
  pytest:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        python-version: [3.8]

    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 35

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Github Actions: Run step on specific OS: https://stackoverflow.com/a/57948488/4521646
      - name: Setup macOS
        if: runner.os == 'macOS'
        run: |
          brew install libomp  # https://github.com/pytorch/pytorch/issues/20030

      # Note: This uses an internal pip API and may not always work
      # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
      - name: Get pip cache
        id: pip-cache
        run: |
          python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python --version
          pip --version
          pip install --requirement requirements.txt --upgrade --quiet --find-links https://download.pytorch.org/whl/cpu/torch_stable.html
          pip install --requirement tests/requirements.txt --quiet
          pip list
        shell: bash

      - name: Deploy
        env:
          BOT_TOKEN: ${{secrets.BOT_TOKEN}}
          SLACK_TOKEN: ${{secrets.SLACK_TOKEN}}
          SIGNING_SECRET: ${{secrets.SIGNING_SECRET}}
          SLACK_CLIENT_ID: ${{secrets.SLACK_CLIENT_ID}}
          CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
          LIGHTNING_USER_ID: ${{secrets.LIGHTNING_USER_ID}}
          LIGHTNING_API_KEY: ${{secrets.LIGHTNING_API_KEY}}
        run: |
          lightning run app app.py --cloud --name "Stable Diffusion" --env LIGHTNING_USER_ID=${{secrets.LIGHTNING_USER_ID}} --env LIGHTNING_API_KEY=${{secrets.LIGHTNING_API_KEY}}
